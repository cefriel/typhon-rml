#set ($prefixes = $reader.setPrefixes("
prefix rml: <http://w3id.org/rml/>
prefix dcat: <http://www.w3.org/ns/dcat#>
prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#>
"))

#set($d="$")

#set ($sources = $reader.getDataframe("
SELECT DISTINCT *
WHERE {
  ?triples_map_id rml:logicalSource ?_source .
  ?_source rml:reader ?reader_id .
  OPTIONAL {
    ?_source rml:source ?data_source .
  }
  OPTIONAL {
    ?data_source a dcat:Distribution .
    ?data_source dcat:accessURL ?access_url . # downloadURL would be better
  }
  # When Source has rml:FilePath
  OPTIONAL {
    ?data_source a rml:FilePath .
    ?data_source rml:root ?root_folder .
    ?data_source rml:path ?path .
    OPTIONAL { ?data_source rml:compression ?compression . }
  }
  # TODO Handle relative paths
  OPTIONAL {
    ?data_source a rml:RelativePathSource .
    ?data_source rml:root ?root_folder .
    ?data_source rml:path ?path .
    OPTIONAL { ?data_source rml:compression ?compression . }
  }
  OPTIONAL {
    ?data_source rml:path ?path .
    OPTIONAL { ?data_source rml:compression ?compression . }
  }
  OPTIONAL {
    ?_source rml:referenceFormulation ?ref_form .
  } # missing in BC page
  OPTIONAL {
    ?_source rml:iterator ?iterator .
  }
  OPTIONAL {
    ?_source rml:query ?query .
  }
  # TODO Handle rml:null
  OPTIONAL {
    ?data_source a d2rq:Database ;
		 d2rq:jdbcDSN ?jdbcDSN ;
		 d2rq:username ?user ;
		 d2rq:password ?password .
     OPTIONAL {?data_source d2rq:jdbcDriver ?jdbcDriver . }
  }
}
"))

#set ($templateLocation = "./data")

<beans>
  <bean name="template" type="com.cefriel.util.ChimeraResourceBean">
    <properties>
      <property key="url" value="file://$templateLocation/template.vm"/>
      <property key="serializationFormat" value="vtl"></property>
    </properties>
  </bean>


  #set ($inputMap = {"http://w3id.org/rml/JSONPath": "json",
		     "http://w3id.org/rml/XPath": "xml",
		     "http://w3id.org/rml/CSV": "csv",
		     "http://w3id.org/rml/SQL2008Table": "sql",
		     "http://w3id.org/rml/SQL2008Query": "sql",
		     "http://www.w3.org/ns/formats/SPARQL_Results_CSV": "rdf"})

  #set ($compressionMap = {"http://w3id.org/rml/gzip": "gzipDeflater",
			   "http://w3id.org/rml/zip": "zipFile",
			   "http://w3id.org/rml/targz": "gzipDeflater"})

  #set ($var = $functions.getMap($sources, "reader_id"))

  #foreach ($k in $var.keySet())
  #set ($source = $functions.getMapValue($var, $k))

  #set ($routeId = $functions.literalHash($source.reader_id))
  #set ($readerName = $routeId)
  #set ($inputFormat = $inputMap[$source.ref_form])
  <route id="$routeId">


  #if ($source.root_folder)
    #if ($source.root_folder == "http://w3id.org/rml/MappingDirectory")
	#set ($dir = "./")
	#set($filename = $source.path)
    #end
  #elseif ($source.path)
    #set($lastSlash = $source.path.lastIndexOf("/"))
    #set($filename = $source.path.substring($lastSlash + 1))
    #set($dir = $source.path.substring(0, $lastSlash + 1))
  #end

  ## logic for reading from files
  #if ($source.path)
    ## HACK for KGCW2025
    ## #set ($dir = "/app/data")
    <from uri="file:${dir}?fileName=${filename}&amp;noop=true"/>

    ## handle input compression
    #if ($source.compression)
      <unmarshal>
	<$compressionMap[$source.compression]/>
      </unmarshal>
      #if ($source.compression == "http://w3id.org/rml/targz")
	<unmarshal>
	  <tarFile/>
	</unmarshal>
      #end
      #if ($source.compression == "http://w3id.org/rml/zip")
	<split stopOnException="true">
	  <simple>${d}{body}</simple>
	<convertBodyTo type="java.lang.String"/>
    </split>
      #end
    #end

    <convertBodyTo type="java.lang.String"/>
  #end

    ## handle sql database
    #if ($inputFormat == "sql")
    <from uri="timer:trigger_${routeId}?repeatCount=1"/>
      <setVariable name="jdbcDSN">
	<constant>$source.jdbcDSN</constant>
      </setVariable>
      <setVariable name="username">
	<constant>$source.user</constant>
      </setVariable>
      <setVariable name="password">
	<constant>$source.password</constant>
      </setVariable>
    #end

    <setVariable name="readerFormat">
      <constant>$inputMap[$source.ref_form]</constant>
    </setVariable>

    #if ($source.path)
    <setVariable name="readerInputFile">
      <constant>$source.path</constant>
    </setVariable>
    #end

    <setVariable name="readerName">
      <constant>$readerName</constant>
    </setVariable>

    <to uri="direct:aggregate"/>
    </route>
  #end

  <route id="readersAggregation">
  <from uri="direct:aggregate" />
  <!-- HARDCODED NAME OF AGGREGATIONS STRATEGY, DO NOT CHANGE -->
  <aggregate
  aggregationStrategy="#class:com.cefriel.ReadersAggregation"
  completionSize="$var.size()">
    <correlationExpression>
    <constant>true</constant>
    </correlationExpression>

    <to uri="mapt://readers?template=#bean:template"/>
 ##   <to uri="graph://get?rdfFormat=nquads&amp;defaultGraph=true"/>
 ##   <to uri="graph://dump?dumpFormat=nquads"/>
    <to uri="file:./?fileName=output.nq"/>

    <!-- STOP THE ROUTE AFTER ONE EXECUTION -->
    <process ref="#class:com.cefriel.ShutDownProcessor"/>
    </aggregate>
 </route>
</beans>
